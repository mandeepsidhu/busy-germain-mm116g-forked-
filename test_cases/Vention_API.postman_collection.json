{
	"info": {
		"_postman_id": "9c5e8a79-9043-4eef-86f2-770e2bd7fdb5",
		"name": "Vention API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Weapons",
			"item": [
				{
					"name": "Weapon Quest",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Weapon",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response contains weapons array\", function () {",
									"    pm.expect(pm.response.json()).to.have.property(\"weapons\").that.is.an(\"array\");",
									"});",
									"",
									"var weapons = pm.response.json().weapons;",
									"pm.test(\"Each weapon has required properties\", function () {",
									"    ",
									"    pm.expect(weapons).to.be.an(\"array\").that.is.not.empty;",
									"",
									"    weapons.forEach(function (weapon) {",
									"        pm.expect(weapon).to.have.property(\"id\");",
									"        pm.expect(weapon).to.have.property(\"name\");",
									"        pm.expect(weapon).to.have.property(\"power_level\");",
									"        pm.expect(weapon).to.have.property(\"status\");",
									"    });",
									"});",
									"",
									"pm.globals.set(\"weapon_id\", weapons[0].id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/weapon",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"weapon"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get MaxBuildQuantity Weapon",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Get the value of weapon_id from the global variables",
									"const weaponIdFromGlobal = pm.globals.get(\"weapon_id\");",
									"",
									"// Get the value of weapon_id from the response body",
									"const response = pm.response.json();",
									"const weaponIdFromResponse = response.weapon.id;",
									"",
									"// Compare the values",
									"pm.test(\"Weapon ID in the path matches the response\", function () {",
									"    pm.expect(weaponIdFromResponse).to.eql(weaponIdFromGlobal);",
									"});",
									"",
									"// Check if maxBuildQty is present in the response",
									"pm.test(\"maxBuildQty is present in the response\", function () {",
									"    pm.expect(response).to.have.property(\"maxBuildQty\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/weapon/{{weapon_id}}/maxBuildQuantity",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"weapon",
								"{{weapon_id}}",
								"maxBuildQuantity"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get NonExisting Weapon",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/weapon/-4/maxBuildQuantity",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"weapon",
								"-4",
								"maxBuildQuantity"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Materials",
			"item": [
				{
					"name": "Get All Materials",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response contains materials array\", function () {",
									"    pm.expect(pm.response.json()).to.have.property(\"materials\").that.is.an(\"array\");",
									"});",
									"",
									"var materials = pm.response.json().materials;",
									"pm.test(\"Each materials has required properties\", function () {",
									"    ",
									"    pm.expect(materials).to.be.an(\"array\").that.is.not.empty;",
									"",
									"    materials.forEach(function (material) {",
									"        pm.expect(material).to.have.property(\"id\");",
									"        pm.expect(material).to.have.property(\"power_level\");",
									"        pm.expect(material).to.have.property(\"qty\");",
									"        pm.expect(material).to.have.property(\"deleted_at\");",
									"    });",
									"});",
									"",
									"pm.globals.set(\"material_id\", materials[0].id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/material",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"material"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get NonExisting Material",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/material/15",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"material",
								"15"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Material",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const materialIdFromGlobal = pm.globals.get(\"material_id\");",
									"",
									"const response = pm.response.json();",
									"const materialIdFromResponse = response.material.id;",
									"",
									"pm.test(\"Material ID in the path matches the response\", function () {",
									"    pm.expect(materialIdFromResponse).to.eql(materialIdFromGlobal);",
									"});",
									"",
									"pm.test(\"deleted_at value is null\", function () {",
									"    pm.expect(response.material.deleted_at).to.be.null;",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/material/{{material_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"material",
								"{{material_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update NonExisting Material",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"power_level\": 100,\n\t\"qty\": 70\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/material/15",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"material",
								"15"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Material with Negative data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Message is 'Power level and quantity must be positive'\", function () {",
									"    pm.expect(pm.response.json().message).to.eql(\"Power level and quantity must be positive\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"power_level\": -100,\n\t\"qty\": -70\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/material/{{material_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"material",
								"{{material_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Material",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const materialIdFromGlobal = pm.globals.get(\"material_id\");",
									"",
									"const response = pm.response.json();",
									"const materialIdFromResponse = response.updatedMaterial.id;",
									"",
									"pm.test(\"Material ID in the path matches the response\", function () {",
									"    pm.expect(materialIdFromResponse).to.eql(materialIdFromGlobal);",
									"});",
									"",
									"pm.test(\"deleted_at value is null\", function () {",
									"    pm.expect(response.updatedMaterial.deleted_at).to.be.null;",
									"});",
									"",
									"pm.test(\"Status is new when id matches\", function () {",
									"    const matchedWeapon = response.updatedWeapons.find((weapon) => weapon.id === materialIdFromGlobal);",
									"    ",
									"    // Perform the status check only if a matching weapon is found",
									"    if (matchedWeapon) {",
									"        pm.expect(matchedWeapon.status).to.eql(\"new\");",
									"    }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"power_level\": 120,\n\t\"qty\": 70\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/material/{{material_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"material",
								"{{material_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete NonExisting Material",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/material/-15",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"material",
								"-15"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Material",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const materialIdFromGlobal = pm.globals.get(\"material_id\");",
									"",
									"const response = pm.response.json();",
									"const materialIdFromResponse = response.deletedMaterials[0].id;",
									"",
									"pm.test(\"deleted_at value is null\", function () {",
									"    pm.expect(response.deletedMaterials[0].deleted_at).not.to.be.null;",
									"});",
									"",
									"pm.test(\"Status is broken for all weapons\", function () {",
									"    const brokenWeapons = response.brokenWeapons;",
									"    ",
									"    // Iterate over each weapon and check its status",
									"    brokenWeapons.forEach((weapon) => {",
									"        pm.expect(weapon.status).to.eql(\"broken\");",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/material/{{material_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"material",
								"{{material_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Compositions",
			"item": [
				{
					"name": "Get Composition",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"material_id\": 9,\n\t\"qty\": 5\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/material/4/composition",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"material",
								"4",
								"composition"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Composition",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"material_id\": 9,\n\t\"qty\": 5\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/material/3/composition/11",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"material",
								"3",
								"composition",
								"11"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Composition",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"material_id\": 1,\n\t\"qty\": 5\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/material/4/composition/9",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"material",
								"4",
								"composition",
								"9"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}